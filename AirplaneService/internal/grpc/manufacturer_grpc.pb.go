// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.26.1
// source: manufacturer.proto

package grpc

import (
	"AirplaneService/internal/entity"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ManufacturerService_CreateManufacturer_FullMethodName = "/ManufacturerService/CreateManufacturer"
	ManufacturerService_GetManufacturer_FullMethodName    = "/ManufacturerService/GetManufacturer"
	ManufacturerService_UpdateManufacturer_FullMethodName = "/ManufacturerService/UpdateManufacturer"
	ManufacturerService_DeleteManufacturer_FullMethodName = "/ManufacturerService/DeleteManufacturer"
	ManufacturerService_ListManufacturers_FullMethodName  = "/ManufacturerService/ListManufacturers"
)

// ManufacturerServiceClient is the client API for ManufacturerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Manufacturer service definition
type ManufacturerServiceClient interface {
	// Create a new Manufacturer
	CreateManufacturer(ctx context.Context, in *entity.CreateManufacturerRequest, opts ...grpc.CallOption) (*entity.ManufacturerResponse, error)
	// Get a Manufacturer by ID
	GetManufacturer(ctx context.Context, in *entity.GetManufacturerRequest, opts ...grpc.CallOption) (*entity.ManufacturerResponse, error)
	// Update a Manufacturer
	UpdateManufacturer(ctx context.Context, in *entity.UpdateManufacturerRequest, opts ...grpc.CallOption) (*entity.ManufacturerResponse, error)
	// Delete a Manufacturer by ID
	DeleteManufacturer(ctx context.Context, in *entity.DeleteManufacturerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List all Manufacturers
	ListManufacturers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*entity.ListManufacturersResponse, error)
}

type manufacturerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManufacturerServiceClient(cc grpc.ClientConnInterface) ManufacturerServiceClient {
	return &manufacturerServiceClient{cc}
}

func (c *manufacturerServiceClient) CreateManufacturer(ctx context.Context, in *entity.CreateManufacturerRequest, opts ...grpc.CallOption) (*entity.ManufacturerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(entity.ManufacturerResponse)
	err := c.cc.Invoke(ctx, ManufacturerService_CreateManufacturer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manufacturerServiceClient) GetManufacturer(ctx context.Context, in *entity.GetManufacturerRequest, opts ...grpc.CallOption) (*entity.ManufacturerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(entity.ManufacturerResponse)
	err := c.cc.Invoke(ctx, ManufacturerService_GetManufacturer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manufacturerServiceClient) UpdateManufacturer(ctx context.Context, in *entity.UpdateManufacturerRequest, opts ...grpc.CallOption) (*entity.ManufacturerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(entity.ManufacturerResponse)
	err := c.cc.Invoke(ctx, ManufacturerService_UpdateManufacturer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manufacturerServiceClient) DeleteManufacturer(ctx context.Context, in *entity.DeleteManufacturerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ManufacturerService_DeleteManufacturer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manufacturerServiceClient) ListManufacturers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*entity.ListManufacturersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(entity.ListManufacturersResponse)
	err := c.cc.Invoke(ctx, ManufacturerService_ListManufacturers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManufacturerServiceServer is the server API for ManufacturerService service.
// All implementations must embed UnimplementedManufacturerServiceServer
// for forward compatibility
//
// Manufacturer service definition
type ManufacturerServiceServer interface {
	// Create a new Manufacturer
	CreateManufacturer(context.Context, *entity.CreateManufacturerRequest) (*entity.ManufacturerResponse, error)
	// Get a Manufacturer by ID
	GetManufacturer(context.Context, *entity.GetManufacturerRequest) (*entity.ManufacturerResponse, error)
	// Update a Manufacturer
	UpdateManufacturer(context.Context, *entity.UpdateManufacturerRequest) (*entity.ManufacturerResponse, error)
	// Delete a Manufacturer by ID
	DeleteManufacturer(context.Context, *entity.DeleteManufacturerRequest) (*emptypb.Empty, error)
	// List all Manufacturers
	ListManufacturers(context.Context, *emptypb.Empty) (*entity.ListManufacturersResponse, error)
	mustEmbedUnimplementedManufacturerServiceServer()
}

// UnimplementedManufacturerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedManufacturerServiceServer struct {
}

func (UnimplementedManufacturerServiceServer) CreateManufacturer(context.Context, *entity.CreateManufacturerRequest) (*entity.ManufacturerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateManufacturer not implemented")
}
func (UnimplementedManufacturerServiceServer) GetManufacturer(context.Context, *entity.GetManufacturerRequest) (*entity.ManufacturerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManufacturer not implemented")
}
func (UnimplementedManufacturerServiceServer) UpdateManufacturer(context.Context, *entity.UpdateManufacturerRequest) (*entity.ManufacturerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateManufacturer not implemented")
}
func (UnimplementedManufacturerServiceServer) DeleteManufacturer(context.Context, *entity.DeleteManufacturerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteManufacturer not implemented")
}
func (UnimplementedManufacturerServiceServer) ListManufacturers(context.Context, *emptypb.Empty) (*entity.ListManufacturersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListManufacturers not implemented")
}
func (UnimplementedManufacturerServiceServer) mustEmbedUnimplementedManufacturerServiceServer() {}

// UnsafeManufacturerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManufacturerServiceServer will
// result in compilation errors.
type UnsafeManufacturerServiceServer interface {
	mustEmbedUnimplementedManufacturerServiceServer()
}

func RegisterManufacturerServiceServer(s grpc.ServiceRegistrar, srv ManufacturerServiceServer) {
	s.RegisterService(&ManufacturerService_ServiceDesc, srv)
}

func _ManufacturerService_CreateManufacturer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.CreateManufacturerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManufacturerServiceServer).CreateManufacturer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManufacturerService_CreateManufacturer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManufacturerServiceServer).CreateManufacturer(ctx, req.(*entity.CreateManufacturerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManufacturerService_GetManufacturer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.GetManufacturerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManufacturerServiceServer).GetManufacturer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManufacturerService_GetManufacturer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManufacturerServiceServer).GetManufacturer(ctx, req.(*entity.GetManufacturerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManufacturerService_UpdateManufacturer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.UpdateManufacturerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManufacturerServiceServer).UpdateManufacturer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManufacturerService_UpdateManufacturer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManufacturerServiceServer).UpdateManufacturer(ctx, req.(*entity.UpdateManufacturerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManufacturerService_DeleteManufacturer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.DeleteManufacturerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManufacturerServiceServer).DeleteManufacturer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManufacturerService_DeleteManufacturer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManufacturerServiceServer).DeleteManufacturer(ctx, req.(*entity.DeleteManufacturerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManufacturerService_ListManufacturers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManufacturerServiceServer).ListManufacturers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManufacturerService_ListManufacturers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManufacturerServiceServer).ListManufacturers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ManufacturerService_ServiceDesc is the grpc.ServiceDesc for ManufacturerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManufacturerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ManufacturerService",
	HandlerType: (*ManufacturerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateManufacturer",
			Handler:    _ManufacturerService_CreateManufacturer_Handler,
		},
		{
			MethodName: "GetManufacturer",
			Handler:    _ManufacturerService_GetManufacturer_Handler,
		},
		{
			MethodName: "UpdateManufacturer",
			Handler:    _ManufacturerService_UpdateManufacturer_Handler,
		},
		{
			MethodName: "DeleteManufacturer",
			Handler:    _ManufacturerService_DeleteManufacturer_Handler,
		},
		{
			MethodName: "ListManufacturers",
			Handler:    _ManufacturerService_ListManufacturers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manufacturer.proto",
}
