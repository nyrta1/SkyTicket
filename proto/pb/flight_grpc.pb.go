// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: flight.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	FlightManager_CreateFlight_FullMethodName     = "/FlightManager/CreateFlight"
	FlightManager_UpdateFlight_FullMethodName     = "/FlightManager/UpdateFlight"
	FlightManager_DeleteFlight_FullMethodName     = "/FlightManager/DeleteFlight"
	FlightManager_UpdateFlightSlot_FullMethodName = "/FlightManager/UpdateFlightSlot"
	FlightManager_GetFlight_FullMethodName        = "/FlightManager/GetFlight"
	FlightManager_SearchFlight_FullMethodName     = "/FlightManager/SearchFlight"
	FlightManager_ListFlight_FullMethodName       = "/FlightManager/ListFlight"
)

// FlightManagerClient is the client API for FlightManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlightManagerClient interface {
	CreateFlight(ctx context.Context, in *Flight, opts ...grpc.CallOption) (*Flight, error)
	UpdateFlight(ctx context.Context, in *Flight, opts ...grpc.CallOption) (*Flight, error)
	DeleteFlight(ctx context.Context, in *DeleteFlightRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateFlightSlot(ctx context.Context, in *UpdateFlightSlotRequest, opts ...grpc.CallOption) (*Flight, error)
	GetFlight(ctx context.Context, in *GetFlightRequest, opts ...grpc.CallOption) (*GetFlightResponse, error)
	SearchFlight(ctx context.Context, in *SearchFlightRequest, opts ...grpc.CallOption) (*SearchFlightResponse, error)
	ListFlight(ctx context.Context, in *ListFlightRequest, opts ...grpc.CallOption) (*ListFlightResponse, error)
}

type flightManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewFlightManagerClient(cc grpc.ClientConnInterface) FlightManagerClient {
	return &flightManagerClient{cc}
}

func (c *flightManagerClient) CreateFlight(ctx context.Context, in *Flight, opts ...grpc.CallOption) (*Flight, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Flight)
	err := c.cc.Invoke(ctx, FlightManager_CreateFlight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightManagerClient) UpdateFlight(ctx context.Context, in *Flight, opts ...grpc.CallOption) (*Flight, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Flight)
	err := c.cc.Invoke(ctx, FlightManager_UpdateFlight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightManagerClient) DeleteFlight(ctx context.Context, in *DeleteFlightRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FlightManager_DeleteFlight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightManagerClient) UpdateFlightSlot(ctx context.Context, in *UpdateFlightSlotRequest, opts ...grpc.CallOption) (*Flight, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Flight)
	err := c.cc.Invoke(ctx, FlightManager_UpdateFlightSlot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightManagerClient) GetFlight(ctx context.Context, in *GetFlightRequest, opts ...grpc.CallOption) (*GetFlightResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFlightResponse)
	err := c.cc.Invoke(ctx, FlightManager_GetFlight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightManagerClient) SearchFlight(ctx context.Context, in *SearchFlightRequest, opts ...grpc.CallOption) (*SearchFlightResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchFlightResponse)
	err := c.cc.Invoke(ctx, FlightManager_SearchFlight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightManagerClient) ListFlight(ctx context.Context, in *ListFlightRequest, opts ...grpc.CallOption) (*ListFlightResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFlightResponse)
	err := c.cc.Invoke(ctx, FlightManager_ListFlight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlightManagerServer is the server API for FlightManager service.
// All implementations must embed UnimplementedFlightManagerServer
// for forward compatibility
type FlightManagerServer interface {
	CreateFlight(context.Context, *Flight) (*Flight, error)
	UpdateFlight(context.Context, *Flight) (*Flight, error)
	DeleteFlight(context.Context, *DeleteFlightRequest) (*emptypb.Empty, error)
	UpdateFlightSlot(context.Context, *UpdateFlightSlotRequest) (*Flight, error)
	GetFlight(context.Context, *GetFlightRequest) (*GetFlightResponse, error)
	SearchFlight(context.Context, *SearchFlightRequest) (*SearchFlightResponse, error)
	ListFlight(context.Context, *ListFlightRequest) (*ListFlightResponse, error)
	mustEmbedUnimplementedFlightManagerServer()
}

// UnimplementedFlightManagerServer must be embedded to have forward compatible implementations.
type UnimplementedFlightManagerServer struct {
}

func (UnimplementedFlightManagerServer) CreateFlight(context.Context, *Flight) (*Flight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlight not implemented")
}
func (UnimplementedFlightManagerServer) UpdateFlight(context.Context, *Flight) (*Flight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlight not implemented")
}
func (UnimplementedFlightManagerServer) DeleteFlight(context.Context, *DeleteFlightRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlight not implemented")
}
func (UnimplementedFlightManagerServer) UpdateFlightSlot(context.Context, *UpdateFlightSlotRequest) (*Flight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlightSlot not implemented")
}
func (UnimplementedFlightManagerServer) GetFlight(context.Context, *GetFlightRequest) (*GetFlightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlight not implemented")
}
func (UnimplementedFlightManagerServer) SearchFlight(context.Context, *SearchFlightRequest) (*SearchFlightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFlight not implemented")
}
func (UnimplementedFlightManagerServer) ListFlight(context.Context, *ListFlightRequest) (*ListFlightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlight not implemented")
}
func (UnimplementedFlightManagerServer) mustEmbedUnimplementedFlightManagerServer() {}

// UnsafeFlightManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlightManagerServer will
// result in compilation errors.
type UnsafeFlightManagerServer interface {
	mustEmbedUnimplementedFlightManagerServer()
}

func RegisterFlightManagerServer(s grpc.ServiceRegistrar, srv FlightManagerServer) {
	s.RegisterService(&FlightManager_ServiceDesc, srv)
}

func _FlightManager_CreateFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Flight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightManagerServer).CreateFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlightManager_CreateFlight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightManagerServer).CreateFlight(ctx, req.(*Flight))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightManager_UpdateFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Flight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightManagerServer).UpdateFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlightManager_UpdateFlight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightManagerServer).UpdateFlight(ctx, req.(*Flight))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightManager_DeleteFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFlightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightManagerServer).DeleteFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlightManager_DeleteFlight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightManagerServer).DeleteFlight(ctx, req.(*DeleteFlightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightManager_UpdateFlightSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlightSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightManagerServer).UpdateFlightSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlightManager_UpdateFlightSlot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightManagerServer).UpdateFlightSlot(ctx, req.(*UpdateFlightSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightManager_GetFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightManagerServer).GetFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlightManager_GetFlight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightManagerServer).GetFlight(ctx, req.(*GetFlightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightManager_SearchFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFlightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightManagerServer).SearchFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlightManager_SearchFlight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightManagerServer).SearchFlight(ctx, req.(*SearchFlightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightManager_ListFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFlightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightManagerServer).ListFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlightManager_ListFlight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightManagerServer).ListFlight(ctx, req.(*ListFlightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlightManager_ServiceDesc is the grpc.ServiceDesc for FlightManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlightManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FlightManager",
	HandlerType: (*FlightManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFlight",
			Handler:    _FlightManager_CreateFlight_Handler,
		},
		{
			MethodName: "UpdateFlight",
			Handler:    _FlightManager_UpdateFlight_Handler,
		},
		{
			MethodName: "DeleteFlight",
			Handler:    _FlightManager_DeleteFlight_Handler,
		},
		{
			MethodName: "UpdateFlightSlot",
			Handler:    _FlightManager_UpdateFlightSlot_Handler,
		},
		{
			MethodName: "GetFlight",
			Handler:    _FlightManager_GetFlight_Handler,
		},
		{
			MethodName: "SearchFlight",
			Handler:    _FlightManager_SearchFlight_Handler,
		},
		{
			MethodName: "ListFlight",
			Handler:    _FlightManager_ListFlight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flight.proto",
}
