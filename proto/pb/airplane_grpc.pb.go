// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: airplane.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AirplaneService_GetAirplane_FullMethodName    = "/AirplaneService/GetAirplane"
	AirplaneService_CreateAirplane_FullMethodName = "/AirplaneService/CreateAirplane"
	AirplaneService_UpdateAirplane_FullMethodName = "/AirplaneService/UpdateAirplane"
	AirplaneService_DeleteAirplane_FullMethodName = "/AirplaneService/DeleteAirplane"
	AirplaneService_ListAirplanes_FullMethodName  = "/AirplaneService/ListAirplanes"
)

// AirplaneServiceClient is the client API for AirplaneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Airplane service definition
type AirplaneServiceClient interface {
	GetAirplane(ctx context.Context, in *GetAirplaneRequest, opts ...grpc.CallOption) (*Airplane, error)
	CreateAirplane(ctx context.Context, in *CreateAirplaneRequest, opts ...grpc.CallOption) (*Airplane, error)
	UpdateAirplane(ctx context.Context, in *UpdateAirplaneRequest, opts ...grpc.CallOption) (*Airplane, error)
	DeleteAirplane(ctx context.Context, in *DeleteAirplaneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListAirplanes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAirplanesResponse, error)
}

type airplaneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAirplaneServiceClient(cc grpc.ClientConnInterface) AirplaneServiceClient {
	return &airplaneServiceClient{cc}
}

func (c *airplaneServiceClient) GetAirplane(ctx context.Context, in *GetAirplaneRequest, opts ...grpc.CallOption) (*Airplane, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Airplane)
	err := c.cc.Invoke(ctx, AirplaneService_GetAirplane_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airplaneServiceClient) CreateAirplane(ctx context.Context, in *CreateAirplaneRequest, opts ...grpc.CallOption) (*Airplane, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Airplane)
	err := c.cc.Invoke(ctx, AirplaneService_CreateAirplane_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airplaneServiceClient) UpdateAirplane(ctx context.Context, in *UpdateAirplaneRequest, opts ...grpc.CallOption) (*Airplane, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Airplane)
	err := c.cc.Invoke(ctx, AirplaneService_UpdateAirplane_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airplaneServiceClient) DeleteAirplane(ctx context.Context, in *DeleteAirplaneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AirplaneService_DeleteAirplane_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airplaneServiceClient) ListAirplanes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAirplanesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAirplanesResponse)
	err := c.cc.Invoke(ctx, AirplaneService_ListAirplanes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AirplaneServiceServer is the server API for AirplaneService service.
// All implementations must embed UnimplementedAirplaneServiceServer
// for forward compatibility
//
// Airplane service definition
type AirplaneServiceServer interface {
	GetAirplane(context.Context, *GetAirplaneRequest) (*Airplane, error)
	CreateAirplane(context.Context, *CreateAirplaneRequest) (*Airplane, error)
	UpdateAirplane(context.Context, *UpdateAirplaneRequest) (*Airplane, error)
	DeleteAirplane(context.Context, *DeleteAirplaneRequest) (*emptypb.Empty, error)
	ListAirplanes(context.Context, *emptypb.Empty) (*ListAirplanesResponse, error)
	mustEmbedUnimplementedAirplaneServiceServer()
}

// UnimplementedAirplaneServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAirplaneServiceServer struct {
}

func (UnimplementedAirplaneServiceServer) GetAirplane(context.Context, *GetAirplaneRequest) (*Airplane, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAirplane not implemented")
}
func (UnimplementedAirplaneServiceServer) CreateAirplane(context.Context, *CreateAirplaneRequest) (*Airplane, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAirplane not implemented")
}
func (UnimplementedAirplaneServiceServer) UpdateAirplane(context.Context, *UpdateAirplaneRequest) (*Airplane, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAirplane not implemented")
}
func (UnimplementedAirplaneServiceServer) DeleteAirplane(context.Context, *DeleteAirplaneRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAirplane not implemented")
}
func (UnimplementedAirplaneServiceServer) ListAirplanes(context.Context, *emptypb.Empty) (*ListAirplanesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAirplanes not implemented")
}
func (UnimplementedAirplaneServiceServer) mustEmbedUnimplementedAirplaneServiceServer() {}

// UnsafeAirplaneServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AirplaneServiceServer will
// result in compilation errors.
type UnsafeAirplaneServiceServer interface {
	mustEmbedUnimplementedAirplaneServiceServer()
}

func RegisterAirplaneServiceServer(s grpc.ServiceRegistrar, srv AirplaneServiceServer) {
	s.RegisterService(&AirplaneService_ServiceDesc, srv)
}

func _AirplaneService_GetAirplane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAirplaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirplaneServiceServer).GetAirplane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AirplaneService_GetAirplane_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirplaneServiceServer).GetAirplane(ctx, req.(*GetAirplaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirplaneService_CreateAirplane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAirplaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirplaneServiceServer).CreateAirplane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AirplaneService_CreateAirplane_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirplaneServiceServer).CreateAirplane(ctx, req.(*CreateAirplaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirplaneService_UpdateAirplane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAirplaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirplaneServiceServer).UpdateAirplane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AirplaneService_UpdateAirplane_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirplaneServiceServer).UpdateAirplane(ctx, req.(*UpdateAirplaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirplaneService_DeleteAirplane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAirplaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirplaneServiceServer).DeleteAirplane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AirplaneService_DeleteAirplane_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirplaneServiceServer).DeleteAirplane(ctx, req.(*DeleteAirplaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirplaneService_ListAirplanes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirplaneServiceServer).ListAirplanes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AirplaneService_ListAirplanes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirplaneServiceServer).ListAirplanes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AirplaneService_ServiceDesc is the grpc.ServiceDesc for AirplaneService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AirplaneService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AirplaneService",
	HandlerType: (*AirplaneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAirplane",
			Handler:    _AirplaneService_GetAirplane_Handler,
		},
		{
			MethodName: "CreateAirplane",
			Handler:    _AirplaneService_CreateAirplane_Handler,
		},
		{
			MethodName: "UpdateAirplane",
			Handler:    _AirplaneService_UpdateAirplane_Handler,
		},
		{
			MethodName: "DeleteAirplane",
			Handler:    _AirplaneService_DeleteAirplane_Handler,
		},
		{
			MethodName: "ListAirplanes",
			Handler:    _AirplaneService_ListAirplanes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "airplane.proto",
}
